generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                     @id @default(uuid())
  name                     String?
  email                    String                     @unique
  password                 String?
  image                    String?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  accounts                 Account[]
  armazens                 Armazem[]
  Fornecedor               Fornecedor[]
  pedidos                  PedidoCompra[]
  produtos                 Produto[]
  saidas                   Saida[]
  sessions                 Session[]
  BlingAccount             BlingAccount[]
  MercadoLivreAccount      MercadoLivreAccount[]
  StockReplenishmentConfig StockReplenishmentConfig[]
  transferencias           TransferenciaEstoque[]
}

model MercadoLivreAccount {
  id            String                    @id @default(uuid())
  userId        String
  mlUserId      String                    @unique
  accessToken   String
  refreshToken  String
  expiresAt     DateTime
  nickname      String
  siteId        String
  isActive      Boolean                   @default(true)
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  user          User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  syncHistories MercadoLivreSyncHistory[]
  webhooks      MercadoLivreWebhook[]
  produtos      ProdutoMercadoLivre[]

  @@unique([userId, mlUserId])
  @@map("mercado_livre_accounts")
}

model ProdutoMercadoLivre {
  id                    String              @id @default(uuid())
  produtoId             String?
  mercadoLivreAccountId String
  mlItemId              String
  mlTitle               String
  mlPrice               Int
  mlAvailableQuantity   Int
  mlSoldQuantity        Int                 @default(0)
  mlStatus              String
  mlCondition           String              @default("new")
  mlListingType         String              @default("gold_special")
  mlPermalink           String?
  mlThumbnail           String?
  mlCategoryId          String?
  mlCategoryName        String?
  mlShippingMode        String?
  mlAcceptsMercadoPago  Boolean             @default(true)
  mlFreeShipping        Boolean             @default(false)
  mlLastUpdated         DateTime?
  lastSyncAt            DateTime            @default(now())
  syncStatus            String              @default("synced")
  syncError             String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  mlBasePrice           Int?
  mlHasPromotion        Boolean             @default(false)
  mlOriginalPrice       Int?
  mlPromotionDiscount   Int?
  mlSold90Days          Int?
  mercadoLivreAccount   MercadoLivreAccount @relation(fields: [mercadoLivreAccountId], references: [id], onDelete: Cascade)
  produto               Produto?            @relation(fields: [produtoId], references: [id], onDelete: Cascade)

  @@unique([mlItemId, mercadoLivreAccountId])
  @@map("produtos_mercado_livre")
}

model MercadoLivreSyncHistory {
  id                    String              @id @default(uuid())
  mercadoLivreAccountId String
  syncType              String
  status                String
  totalItems            Int                 @default(0)
  syncedItems           Int                 @default(0)
  newItems              Int                 @default(0)
  updatedItems          Int                 @default(0)
  errorItems            Int                 @default(0)
  errors                Json?
  startedAt             DateTime            @default(now())
  completedAt           DateTime?
  duration              Int?
  mercadoLivreAccount   MercadoLivreAccount @relation(fields: [mercadoLivreAccountId], references: [id], onDelete: Cascade)

  @@map("mercado_livre_sync_history")
}

model MercadoLivreWebhook {
  id                    String              @id @default(uuid())
  mercadoLivreAccountId String
  mlNotificationId      String              @unique
  resource              String
  userId                String
  topic                 String
  applicationId         String
  attempts              Int                 @default(0)
  processed             Boolean             @default(false)
  processedAt           DateTime?
  error                 String?
  receivedAt            DateTime            @default(now())
  mercadoLivreAccount   MercadoLivreAccount @relation(fields: [mercadoLivreAccountId], references: [id], onDelete: Cascade)

  @@map("mercado_livre_webhooks")
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Produto {
  id                  String                @id @default(uuid())
  nome                String
  sku                 String
  isKit               Boolean               @default(false)
  ean                 BigInt?
  userId              String
  custoMedio          Int?                  @default(0)
  componentes         Componente[]          @relation("KitToComponente")
  kitsComponentes     Componente[]          @relation("ProdutoToComponente")
  detalhesSaida       DetalhesSaida[]
  estoques            Estoque[]
  pedidos             PedidoProduto[]
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  fornecedores        ProdutoFornecedor[]
  saidas              Saida[]
  ProdutoMercadoLivre ProdutoMercadoLivre[]
  transferenciaItens  TransferenciaItem[]

  @@unique([sku, userId])
}

model Componente {
  id         Int     @id @default(autoincrement())
  quantidade Int
  produtoId  String
  kitId      String
  kit        Produto @relation("KitToComponente", fields: [kitId], references: [id])
  produto    Produto @relation("ProdutoToComponente", fields: [produtoId], references: [id])
}

model Estoque {
  produtoId        String
  armazemId        String
  quantidade       Int
  estoqueSeguranca Int?
  armazem          Armazem @relation(fields: [armazemId], references: [id])
  produto          Produto @relation(fields: [produtoId], references: [id])

  @@id([produtoId, armazemId])
}

model Saida {
  id        String          @id @default(uuid())
  data      DateTime        @default(now())
  armazemId String
  produtoId String?
  userId    String
  detalhes  DetalhesSaida[]
  armazem   Armazem         @relation(fields: [armazemId], references: [id])
  produto   Produto?        @relation(fields: [produtoId], references: [id])
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DetalhesSaida {
  id         Int     @id @default(autoincrement())
  saidaId    String
  produtoId  String
  quantidade Int
  isKit      Boolean
  produto    Produto @relation(fields: [produtoId], references: [id])
  saida      Saida   @relation(fields: [saidaId], references: [id])
}

model Armazem {
  id                    String                 @id @default(uuid())
  nome                  String
  userId                String
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  estoques              Estoque[]
  saidas                Saida[]
  transferenciasDestino TransferenciaEstoque[] @relation("TransferenciaDestino")
  transferenciasOrigem  TransferenciaEstoque[] @relation("TransferenciaOrigem")
}

model Fornecedor {
  id                String              @id @default(uuid())
  nome              String
  cnpj              String?
  inscricaoEstadual String?
  contato           String?
  endereco          String?
  userId            String
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  pedidos           PedidoCompra[]
  produtos          ProdutoFornecedor[]
}

model PedidoCompra {
  id            Int             @id @default(autoincrement())
  fornecedorId  String
  comentarios   String?
  status        String
  armazemId     String?
  dataPrevista  DateTime?
  dataConclusao DateTime?
  userId        String
  fornecedor    Fornecedor      @relation(fields: [fornecedorId], references: [id])
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  produtos      PedidoProduto[]
}

model PedidoProduto {
  id            Int          @id @default(autoincrement())
  pedidoId      Int
  produtoId     String
  quantidade    Int
  custo         Int
  multiplicador Int          @default(1)
  pedido        PedidoCompra @relation(fields: [pedidoId], references: [id])
  produto       Produto      @relation(fields: [produtoId], references: [id])
}

model ProdutoFornecedor {
  id            Int        @id @default(autoincrement())
  produtoId     String
  fornecedorId  String
  preco         Int
  multiplicador Float
  codigoNF      String?
  fornecedor    Fornecedor @relation(fields: [fornecedorId], references: [id])
  produto       Produto    @relation(fields: [produtoId], references: [id])

  @@unique([produtoId, fornecedorId])
}

model TransferenciaEstoque {
  id               String              @id @default(uuid())
  userId           String
  armazemOrigemId  String
  armazemDestinoId String
  data             DateTime            @default(now())
  observacoes      String?
  status           String              @default("concluida")
  itens            TransferenciaItem[]
  armazemDestino   Armazem             @relation("TransferenciaDestino", fields: [armazemDestinoId], references: [id])
  armazemOrigem    Armazem             @relation("TransferenciaOrigem", fields: [armazemOrigemId], references: [id])
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transferencias_estoque")
}

model TransferenciaItem {
  id              Int                  @id @default(autoincrement())
  transferenciaId String
  produtoId       String
  quantidade      Int
  produto         Produto              @relation(fields: [produtoId], references: [id])
  transferencia   TransferenciaEstoque @relation(fields: [transferenciaId], references: [id], onDelete: Cascade)

  @@map("transferencia_itens")
}

model BlingAccount {
  id            String             @id @default(uuid())
  userId        String
  accessToken   String
  refreshToken  String
  expiresAt     DateTime
  isActive      Boolean            @default(true)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  syncHistories BlingSyncHistory[]

  @@map("bling_accounts")
}

model BlingSyncHistory {
  id             String       @id @default(uuid())
  blingAccountId String
  syncType       String
  status         String
  totalItems     Int          @default(0)
  syncedItems    Int          @default(0)
  newItems       Int          @default(0)
  updatedItems   Int          @default(0)
  errorItems     Int          @default(0)
  errors         Json?
  startedAt      DateTime     @default(now())
  completedAt    DateTime?
  duration       Int?
  blingAccount   BlingAccount @relation(fields: [blingAccountId], references: [id], onDelete: Cascade)

  @@map("bling_sync_history")
}

model StockReplenishmentConfig {
  id                 String   @id @default(uuid())
  userId             String
  produtoId          String
  avgDeliveryDays    Int      @default(7)
  fullReleaseDays    Int      @default(3)
  safetyStock        Int      @default(10)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  minCoverageDays    Int      @default(30)
  analysisPeriodDays Int      @default(90)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, produtoId])
  @@map("stock_replenishment_config")
}
