generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  password  String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]

  produtos   Produto[]
  armazens   Armazem[]
  pedidos    PedidoCompra[]
  saidas     Saida[]
  Fornecedor Fornecedor[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Produto {
  id              Int                 @id @default(autoincrement())
  nome            String
  sku             String              @unique
  isKit           Boolean             @default(false)
  ean             BigInt?
  userId          String
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  componentes     Componente[]        @relation("KitToComponente")
  kitsComponentes Componente[]        @relation("ProdutoToComponente")
  custoMedio      Float?              @default(0)
  detalhesSaida   DetalhesSaida[]
  estoques        Estoque[]
  pedidos         PedidoProduto[]
  fornecedores    ProdutoFornecedor[]
  saidas          Saida[]
}

model Componente {
  id         Int     @id @default(autoincrement())
  quantidade Int
  produtoId  Int
  kitId      Int
  kit        Produto @relation("KitToComponente", fields: [kitId], references: [id])
  produto    Produto @relation("ProdutoToComponente", fields: [produtoId], references: [id])
}

model Estoque {
  produtoId        Int
  armazemId        Int
  quantidade       Int
  estoqueSeguranca Int?
  armazem          Armazem @relation(fields: [armazemId], references: [id])
  produto          Produto @relation(fields: [produtoId], references: [id])

  @@id([produtoId, armazemId])
}

model Saida {
  id        Int             @id @default(autoincrement())
  data      DateTime        @default(now())
  armazemId Int
  produtoId Int?
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  detalhes  DetalhesSaida[]
  armazem   Armazem         @relation(fields: [armazemId], references: [id])
  produto   Produto?        @relation(fields: [produtoId], references: [id])
}

model DetalhesSaida {
  id         Int     @id @default(autoincrement())
  saidaId    Int
  produtoId  Int
  quantidade Int
  isKit      Boolean
  produto    Produto @relation(fields: [produtoId], references: [id])
  saida      Saida   @relation(fields: [saidaId], references: [id])
}

model Armazem {
  id       Int       @id @default(autoincrement())
  nome     String
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  estoques Estoque[]
  saidas   Saida[]
}

model Fornecedor {
  id                Int                 @id @default(autoincrement())
  nome              String
  cnpj              String?
  inscricaoEstadual String?
  contato           String?
  endereco          String?
  userId            String
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  pedidos           PedidoCompra[]
  produtos          ProdutoFornecedor[]
}

model PedidoCompra {
  id            Int             @id @default(autoincrement())
  fornecedorId  Int
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  comentarios   String?
  status        String
  armazemId     Int?
  dataPrevista  DateTime?
  dataConclusao DateTime?
  fornecedor    Fornecedor      @relation(fields: [fornecedorId], references: [id])
  produtos      PedidoProduto[]
}

model PedidoProduto {
  id            Int          @id @default(autoincrement())
  pedidoId      Int
  produtoId     Int
  quantidade    Int
  custo         Float
  multiplicador Int          @default(1)
  pedido        PedidoCompra @relation(fields: [pedidoId], references: [id])
  produto       Produto      @relation(fields: [produtoId], references: [id])
}

model ProdutoFornecedor {
  id            Int        @id @default(autoincrement())
  produtoId     Int
  fornecedorId  Int
  preco         Float
  multiplicador Float
  codigoNF      String?
  fornecedor    Fornecedor @relation(fields: [fornecedorId], references: [id])
  produto       Produto    @relation(fields: [produtoId], references: [id])

  @@unique([produtoId, fornecedorId])
}
