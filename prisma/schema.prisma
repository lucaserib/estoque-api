generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Produto {
  id          Int          @id @default(autoincrement())
  nome        String
  sku         String       @unique
  isKit       Boolean      @default(false)
  componentes Componente[] @relation("KitToComponente")
  kitsComponentes Componente[] @relation("ProdutoToComponente")
  ean         BigInt?
  estoques    Estoque[]
  saidas      Saida[]
  pedidos     PedidoProduto[]
  detalhesSaida DetalhesSaida[]
  fornecedores ProdutoFornecedor[]
}

model Componente {
  id         Int      @id @default(autoincrement())
  quantidade Int
  produtoId  Int
  kitId      Int
  produto    Produto  @relation("ProdutoToComponente", fields: [produtoId], references: [id])
  kit        Produto  @relation("KitToComponente", fields: [kitId], references: [id])
}

model Estoque {
  produtoId    Int
  armazemId    Int
  quantidade   Int
  valorUnitario Float
  produto      Produto  @relation(fields: [produtoId], references: [id])
  armazem      Armazem  @relation(fields: [armazemId], references: [id])
  estoqueSeguranca Int?


  @@id([produtoId, armazemId])
}

model Saida {
  id        Int              @id @default(autoincrement())
  data      DateTime         @default(now())
  armazem   Armazem          @relation(fields: [armazemId], references: [id])
  armazemId Int
  detalhes  DetalhesSaida[]
  produto   Produto?         @relation(fields: [produtoId], references: [id])
  produtoId Int?
}

model DetalhesSaida {
  id        Int     @id @default(autoincrement())
  saida     Saida   @relation(fields: [saidaId], references: [id])
  saidaId   Int
  produto   Produto @relation(fields: [produtoId], references: [id])
  produtoId Int
  quantidade Int
  isKit     Boolean
}


model Armazem {
  id      Int      @id @default(autoincrement())
  nome    String
  estoques Estoque[]
  saidas  Saida[]
}

model Fornecedor {
  id                Int      @id @default(autoincrement())
  nome              String
  cnpj              String?
  inscricaoEstadual String?
  contato           String?
  endereco          String?
  produtos          ProdutoFornecedor[] // Relacionamento com produto
  pedidos           PedidoCompra[]
}

model PedidoCompra {

  id          Int             @id @default(autoincrement())
  fornecedorId Int
  comentarios String?
  status      String
  produtos    PedidoProduto[]
  armazemId   Int?
  fornecedor  Fornecedor      @relation(fields: [fornecedorId], references: [id])
  dataPrevista DateTime?

}



model PedidoProduto {

  id         Int      @id @default(autoincrement())

  pedidoId   Int

  produtoId  Int

  quantidade Int

  custo      Float

  pedido     PedidoCompra @relation(fields: [pedidoId], references: [id])

  produto    Produto      @relation(fields: [produtoId], references: [id])

}


model ProdutoFornecedor {
  id               Int       @id @default(autoincrement())
  produtoId        Int
  fornecedorId     Int
  preco            Float     // Preço do produto com este fornecedor
  multiplicador    Float     // Multiplicador usado para o pedido de compra
  codigoNF         String?   // Código NF do produto com o fornecedor
  produto          Produto   @relation(fields: [produtoId], references: [id])
  fornecedor       Fornecedor @relation(fields: [fornecedorId], references: [id])

  @@unique([produtoId, fornecedorId]) // Cada produto pode ter apenas um registro com o fornecedor
}
