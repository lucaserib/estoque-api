generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  password  String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]

  produtos       Produto[]
  armazens       Armazem[]
  pedidos        PedidoCompra[]
  saidas         Saida[]
  Fornecedor     Fornecedor[]
  transferencias TransferenciaEstoque[]

  MercadoLivreAccount MercadoLivreAccount[]
}

model MercadoLivreAccount {
  id           String   @id @default(uuid())
  userId       String
  mlUserId     String   @unique
  accessToken  String   @db.Text
  refreshToken String   @db.Text
  expiresAt    DateTime
  nickname     String
  siteId       String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  produtos      ProdutoMercadoLivre[]
  syncHistories MercadoLivreSyncHistory[]
  webhooks      MercadoLivreWebhook[]

  @@unique([userId, mlUserId])
  @@map("mercado_livre_accounts")
}

model ProdutoMercadoLivre {
  id                    String    @id @default(uuid())
  produtoId             String
  mercadoLivreAccountId String
  mlItemId              String
  mlTitle               String
  mlPrice               Int
  mlOriginalPrice       Int?
  mlBasePrice           Int?
  mlHasPromotion        Boolean   @default(false)
  mlPromotionDiscount   Int?
  mlAvailableQuantity   Int
  mlSoldQuantity        Int       @default(0)
  mlStatus              String
  mlCondition           String    @default("new")
  mlListingType         String    @default("gold_special")
  mlPermalink           String?
  mlThumbnail           String?
  mlCategoryId          String?
  mlCategoryName        String?
  mlShippingMode        String?
  mlAcceptsMercadoPago  Boolean   @default(true)
  mlFreeShipping        Boolean   @default(false)
  mlLastUpdated         DateTime?
  lastSyncAt            DateTime  @default(now())
  syncStatus            String    @default("synced")
  syncError             String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  produto             Produto             @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  mercadoLivreAccount MercadoLivreAccount @relation(fields: [mercadoLivreAccountId], references: [id], onDelete: Cascade)

  @@unique([produtoId, mercadoLivreAccountId])
  @@unique([mlItemId, mercadoLivreAccountId])
  @@map("produtos_mercado_livre")
}

model MercadoLivreSyncHistory {
  id                    String    @id @default(uuid())
  mercadoLivreAccountId String
  syncType              String // full, partial, single_product
  status                String // success, error, partial
  totalItems            Int       @default(0)
  syncedItems           Int       @default(0)
  newItems              Int       @default(0)
  updatedItems          Int       @default(0)
  errorItems            Int       @default(0)
  errors                Json? // Array de erros
  startedAt             DateTime  @default(now())
  completedAt           DateTime?
  duration              Int? // Duração em segundos

  mercadoLivreAccount MercadoLivreAccount @relation(fields: [mercadoLivreAccountId], references: [id], onDelete: Cascade)

  @@map("mercado_livre_sync_history")
}

model MercadoLivreWebhook {
  id                    String    @id @default(uuid())
  mercadoLivreAccountId String
  mlNotificationId      String    @unique // ID da notificação do ML
  resource              String // /items/MLxxxx, /orders/xxxxx
  userId                String // User ID do ML
  topic                 String // items, orders, payments
  applicationId         String // ID da aplicação
  attempts              Int       @default(0)
  processed             Boolean   @default(false)
  processedAt           DateTime?
  error                 String?
  receivedAt            DateTime  @default(now())

  mercadoLivreAccount MercadoLivreAccount @relation(fields: [mercadoLivreAccountId], references: [id], onDelete: Cascade)

  @@map("mercado_livre_webhooks")
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Produto {
  id                 String              @id @default(uuid())
  nome               String
  sku                String
  isKit              Boolean             @default(false)
  ean                BigInt?
  userId             String
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  componentes        Componente[]        @relation("KitToComponente")
  kitsComponentes    Componente[]        @relation("ProdutoToComponente")
  custoMedio         Int?                @default(0)
  detalhesSaida      DetalhesSaida[]
  estoques           Estoque[]
  pedidos            PedidoProduto[]
  fornecedores       ProdutoFornecedor[]
  saidas             Saida[]
  transferenciaItens TransferenciaItem[]

  ProdutoMercadoLivre ProdutoMercadoLivre[]

  @@unique([sku, userId])
}

model Componente {
  id         Int     @id @default(autoincrement())
  quantidade Int
  produtoId  String
  kitId      String
  kit        Produto @relation("KitToComponente", fields: [kitId], references: [id])
  produto    Produto @relation("ProdutoToComponente", fields: [produtoId], references: [id])
}

model Estoque {
  produtoId        String
  armazemId        String
  quantidade       Int
  estoqueSeguranca Int?
  armazem          Armazem @relation(fields: [armazemId], references: [id])
  produto          Produto @relation(fields: [produtoId], references: [id])

  @@id([produtoId, armazemId])
}

model Saida {
  id        String          @id @default(uuid())
  data      DateTime        @default(now())
  armazemId String
  produtoId String?
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  detalhes  DetalhesSaida[]
  armazem   Armazem         @relation(fields: [armazemId], references: [id])
  produto   Produto?        @relation(fields: [produtoId], references: [id])
}

model DetalhesSaida {
  id         Int     @id @default(autoincrement())
  saidaId    String
  produtoId  String
  quantidade Int
  isKit      Boolean
  produto    Produto @relation(fields: [produtoId], references: [id])
  saida      Saida   @relation(fields: [saidaId], references: [id])
}

model Armazem {
  id                    String                 @id @default(uuid())
  nome                  String
  userId                String
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  estoques              Estoque[]
  saidas                Saida[]
  transferenciasOrigem  TransferenciaEstoque[] @relation("TransferenciaOrigem")
  transferenciasDestino TransferenciaEstoque[] @relation("TransferenciaDestino")
}

model Fornecedor {
  id                String              @id @default(uuid())
  nome              String
  cnpj              String?
  inscricaoEstadual String?
  contato           String?
  endereco          String?
  userId            String
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  pedidos           PedidoCompra[]
  produtos          ProdutoFornecedor[]
}

model PedidoCompra {
  id            Int             @id @default(autoincrement())
  fornecedorId  String
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  comentarios   String?
  status        String
  armazemId     String?
  dataPrevista  DateTime?
  dataConclusao DateTime?
  fornecedor    Fornecedor      @relation(fields: [fornecedorId], references: [id])
  produtos      PedidoProduto[]
}

model PedidoProduto {
  id            Int          @id @default(autoincrement())
  pedidoId      Int
  produtoId     String
  quantidade    Int
  custo         Int
  multiplicador Int          @default(1)
  pedido        PedidoCompra @relation(fields: [pedidoId], references: [id])
  produto       Produto      @relation(fields: [produtoId], references: [id])
}

model ProdutoFornecedor {
  id            Int        @id @default(autoincrement())
  produtoId     String
  fornecedorId  String
  preco         Int
  multiplicador Float
  codigoNF      String?
  fornecedor    Fornecedor @relation(fields: [fornecedorId], references: [id])
  produto       Produto    @relation(fields: [produtoId], references: [id])

  @@unique([produtoId, fornecedorId])
}

model TransferenciaEstoque {
  id               String   @id @default(uuid())
  userId           String
  armazemOrigemId  String
  armazemDestinoId String
  data             DateTime @default(now())
  observacoes      String?
  status           String   @default("concluida")

  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  armazemOrigem  Armazem @relation("TransferenciaOrigem", fields: [armazemOrigemId], references: [id])
  armazemDestino Armazem @relation("TransferenciaDestino", fields: [armazemDestinoId], references: [id])

  itens TransferenciaItem[]

  @@map("transferencias_estoque")
}

model TransferenciaItem {
  id              Int    @id @default(autoincrement())
  transferenciaId String
  produtoId       String
  quantidade      Int

  transferencia TransferenciaEstoque @relation(fields: [transferenciaId], references: [id], onDelete: Cascade)
  produto       Produto              @relation(fields: [produtoId], references: [id])

  @@map("transferencia_itens")
}
